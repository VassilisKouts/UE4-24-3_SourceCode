From 4c5f5c541c8bce23c7122456209c295461460078 Mon Sep 17 00:00:00 2001
From: "yangyang.bjtu" <yangyang.bjtu@bytedance.com>
Date: Mon, 27 Apr 2020 18:02:06 +0800
Subject: [PATCH] =?UTF-8?q?=E5=90=91shader=E4=BC=A0=E5=85=A5=E6=9D=90?=
 =?UTF-8?q?=E8=B4=A8=E8=B4=B4=E5=9B=BE?=
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

---
 Engine/Shaders/Private/MaterialTemplate.ush   |  5 ++
 .../Private/MobileBasePassPixelShader.usf     |  8 ++-
 .../MaterialEditor/Private/MaterialEditor.cpp |  1 +
 .../Editor/UnrealEd/Private/MaterialGraph.cpp |  1 +
 .../UnrealEd/Private/PreviewMaterial.cpp      |  5 ++
 .../Engine/Classes/Engine/EngineTypes.h       |  1 +
 .../Engine/Classes/Materials/Material.h       |  3 ++
 ...MaterialExpressionMakeMaterialAttributes.h |  3 ++
 .../Materials/HLSLMaterialTranslator.h        | 54 +++++++++++++++++++
 .../Engine/Private/Materials/Material.cpp     |  9 +++-
 .../Private/Materials/MaterialExpressions.cpp | 10 ++--
 .../Private/Materials/MaterialShader.cpp      |  1 +
 .../Private/Materials/MaterialShared.cpp      |  1 +
 .../Source/Runtime/Engine/Public/SceneTypes.h |  2 +
 14 files changed, 99 insertions(+), 5 deletions(-)

diff --git a/Engine/Shaders/Private/MaterialTemplate.ush b/Engine/Shaders/Private/MaterialTemplate.ush
index b73bf5b0a16..969ae324150 100644
--- a/Engine/Shaders/Private/MaterialTemplate.ush
+++ b/Engine/Shaders/Private/MaterialTemplate.ush
@@ -2061,6 +2061,11 @@ half4 GetMaterialSubsurfaceData(FPixelMaterialInputs PixelMaterialInputs)
 	return OutSubsurface;
 }
 
+half3 GetLutColor(float2 uv)
+{
+%s;
+}
+
 half GetMaterialCustomData0(FMaterialPixelParameters Parameters)
 {
 %s;
diff --git a/Engine/Shaders/Private/MobileBasePassPixelShader.usf b/Engine/Shaders/Private/MobileBasePassPixelShader.usf
index 33864b3caa0..9c4aaa28193 100644
--- a/Engine/Shaders/Private/MobileBasePassPixelShader.usf
+++ b/Engine/Shaders/Private/MobileBasePassPixelShader.usf
@@ -610,7 +610,13 @@ void Main(
 		float RoL = max(0, dot(float3(MaterialParameters.ReflectionVector), float3(MobileDirectionalLight.DirectionalLightDirectionAndShadowTransition.xyz)));
 		float3 H = normalize(float3(MaterialParameters.CameraVector) + float3(MobileDirectionalLight.DirectionalLightDirectionAndShadowTransition.xyz));
 		float NoH = max(0,dot(MaterialParameters.WorldNormal, H));
-
+		#if MATERIAL_SHADINGMODEL_FKCOLORRAMP
+		half halfLambert=0.5*dot(float3(MaterialParameters.WorldNormal), float3(MobileDirectionalLight.DirectionalLightDirectionAndShadowTransition.xyz))+0.5;
+		half ramp=halfLambert*MaterialAO*Shadow;
+		half3 shade = GetLutColor(float2(ramp,0.5));
+		OutColor = half4(shade,1);
+		return;
+		#endif
 		#if FULLY_ROUGH
 			Color += (Shadow * NoL) * MobileDirectionalLight.DirectionalLightColor.rgb * DiffuseColor;
 		#else
diff --git a/Engine/Source/Editor/MaterialEditor/Private/MaterialEditor.cpp b/Engine/Source/Editor/MaterialEditor/Private/MaterialEditor.cpp
index d506d1f7230..436606e3bdf 100644
--- a/Engine/Source/Editor/MaterialEditor/Private/MaterialEditor.cpp
+++ b/Engine/Source/Editor/MaterialEditor/Private/MaterialEditor.cpp
@@ -3305,6 +3305,7 @@ UClass* FMaterialEditor::GetOnPromoteToParameterClass(UEdGraphPin* TargetPin)
 			case MP_BaseColor:
 			case MP_SubsurfaceColor:
 			case MP_SpecularColor:
+			case MP_FKLutMap:
 			case MP_Normal:	return UMaterialExpressionVectorParameter::StaticClass();
 		}
 	}
diff --git a/Engine/Source/Editor/UnrealEd/Private/MaterialGraph.cpp b/Engine/Source/Editor/UnrealEd/Private/MaterialGraph.cpp
index d1ce739983f..913dcc6b32e 100644
--- a/Engine/Source/Editor/UnrealEd/Private/MaterialGraph.cpp
+++ b/Engine/Source/Editor/UnrealEd/Private/MaterialGraph.cpp
@@ -64,6 +64,7 @@ void UMaterialGraph::RebuildGraph()
 
 		//^^^ New material properties go above here. ^^^^
 		MaterialInputs.Add(FMaterialInputInfo(LOCTEXT("MaterialAttributes", "Material Attributes"), MP_MaterialAttributes, LOCTEXT( "MaterialAttributesToolTip", "Material Attributes" ) ));
+		MaterialInputs.Add(FMaterialInputInfo(LOCTEXT("LutMap", "Lut Map"), MP_FKLutMap, LOCTEXT("LutMap", "Lut Map")));
 
 		// Add Root Node
 		FGraphNodeCreator<UMaterialGraphNode_Root> NodeCreator(*this);
diff --git a/Engine/Source/Editor/UnrealEd/Private/PreviewMaterial.cpp b/Engine/Source/Editor/UnrealEd/Private/PreviewMaterial.cpp
index b3585afa55c..559678c2d55 100644
--- a/Engine/Source/Editor/UnrealEd/Private/PreviewMaterial.cpp
+++ b/Engine/Source/Editor/UnrealEd/Private/PreviewMaterial.cpp
@@ -65,6 +65,11 @@ public:
 		// only generate the needed shaders (which should be very restrictive for fast recompiling during editing)
 		// @todo: Add a FindShaderType by fname or something
 
+		if (Material->GetShadingModels().HasShadingModel(EMaterialShadingModel::MSM_ColorRamp))
+		{
+			return true;
+		}
+
 		if( Material->IsUIMaterial() )
 		{
 			if (FCString::Stristr(ShaderType->GetName(), TEXT("TSlateMaterialShaderPS")) ||
diff --git a/Engine/Source/Runtime/Engine/Classes/Engine/EngineTypes.h b/Engine/Source/Runtime/Engine/Classes/Engine/EngineTypes.h
index 7255d67f1c8..e462ef2d20e 100644
--- a/Engine/Source/Runtime/Engine/Classes/Engine/EngineTypes.h
+++ b/Engine/Source/Runtime/Engine/Classes/Engine/EngineTypes.h
@@ -473,6 +473,7 @@ enum EMaterialShadingModel
 	MSM_Cloth					UMETA(DisplayName="Cloth"),
 	MSM_Eye						UMETA(DisplayName="Eye"),
 	MSM_SingleLayerWater		UMETA(DisplayName="SingleLayerWater"),
+	MSM_ColorRamp				UMETA(DisplayName = "ColorRamp"),
 	/** Number of unique shading models. */
 	MSM_NUM						UMETA(Hidden),
 	/** Shading model will be determined by the Material Expression Graph,
diff --git a/Engine/Source/Runtime/Engine/Classes/Materials/Material.h b/Engine/Source/Runtime/Engine/Classes/Materials/Material.h
index 2be84959007..d05ca3ab72e 100644
--- a/Engine/Source/Runtime/Engine/Classes/Materials/Material.h
+++ b/Engine/Source/Runtime/Engine/Classes/Materials/Material.h
@@ -463,6 +463,9 @@ public:
 	/** output ambient occlusion to the GBuffer */
 	UPROPERTY()
 	FScalarMaterialInput AmbientOcclusion;
+
+	UPROPERTY()
+	FVectorMaterialInput FKLutMap;
 #endif
 
 	/**
diff --git a/Engine/Source/Runtime/Engine/Classes/Materials/MaterialExpressionMakeMaterialAttributes.h b/Engine/Source/Runtime/Engine/Classes/Materials/MaterialExpressionMakeMaterialAttributes.h
index 9f75ce30a2a..bc5551efb81 100644
--- a/Engine/Source/Runtime/Engine/Classes/Materials/MaterialExpressionMakeMaterialAttributes.h
+++ b/Engine/Source/Runtime/Engine/Classes/Materials/MaterialExpressionMakeMaterialAttributes.h
@@ -71,6 +71,9 @@ class UMaterialExpressionMakeMaterialAttributes : public UMaterialExpression
 	UPROPERTY()
 	FExpressionInput ShadingModel;
 
+	UPROPERTY()
+	FExpressionInput FKLutMap;
+
 	//~ Begin UObject Interface
 	virtual void Serialize(FStructuredArchive::FRecord Record) override;
 	//~ End UObject Interface
diff --git a/Engine/Source/Runtime/Engine/Private/Materials/HLSLMaterialTranslator.h b/Engine/Source/Runtime/Engine/Private/Materials/HLSLMaterialTranslator.h
index cf5b1362370..bdd8be7f82b 100644
--- a/Engine/Source/Runtime/Engine/Private/Materials/HLSLMaterialTranslator.h
+++ b/Engine/Source/Runtime/Engine/Private/Materials/HLSLMaterialTranslator.h
@@ -948,6 +948,8 @@ public:
 			Chunk[MP_CustomData0]					= Material->CompilePropertyAndSetMaterialProperty(MP_CustomData0		,this);
 			Chunk[MP_CustomData1]					= Material->CompilePropertyAndSetMaterialProperty(MP_CustomData1		,this);
 			Chunk[MP_AmbientOcclusion]				= Material->CompilePropertyAndSetMaterialProperty(MP_AmbientOcclusion	,this);
+			Chunk[MP_FKLutMap]						= Material->CompilePropertyAndSetMaterialProperty(MP_FKLutMap, this);
+
 
 			if (IsTranslucentBlendMode(BlendMode) || MaterialShadingModels.HasShadingModel(MSM_SingleLayerWater))
 			{
@@ -1524,6 +1526,12 @@ ResourcesString = TEXT("");
 				NumSetMaterials++;
 			}
 
+			if (ShadingModels.HasShadingModel(MSM_ColorRamp))
+			{
+				OutEnvironment.SetDefine(TEXT("MATERIAL_SHADINGMODEL_FKCOLORRAMP"), TEXT("1"));
+				NumSetMaterials++;
+			}
+
 			if(ShadingModels.HasShadingModel(MSM_SingleLayerWater) && (IsSwitchPlatform(Platform) || IsPS4Platform(Platform) || Platform == SP_XBOXONE_D3D12))
 			{
 				OutEnvironment.SetDefine(TEXT("DISABLE_FORWARD_LOCAL_LIGHTS"), TEXT("1"));
@@ -1747,6 +1755,52 @@ ResourcesString = TEXT("");
 		LazyPrintf.PushParam(*GenerateFunctionCode(MP_WorldDisplacement));
 		LazyPrintf.PushParam(*FString::Printf(TEXT("return %.5f"),Material->GetMaxDisplacement()));
 		LazyPrintf.PushParam(*GenerateFunctionCode(MP_TessellationMultiplier));
+		//lut tex
+		FMaterialShadingModelField MaterialShadingModels = Material->GetShadingModels();
+		FString lutTexCode = FString::Printf(TEXT("return 1"));
+		if (MaterialShadingModels.HasShadingModel(MSM_ColorRamp))
+		{
+			FString lutCode = TranslatedCodeChunkDefinitions[MP_FKLutMap];
+			FString returnCode = TranslatedCodeChunks[MP_FKLutMap];
+			int startIndex = returnCode.Find(".rgb");
+			if (startIndex != INDEX_NONE)
+			{
+				returnCode = returnCode.Left(startIndex);
+				FString containCode = "MaterialFloat4 " + returnCode + " = ProcessMaterialColorTextureLookup";
+				FString leftStr;
+				FString rightStr;
+				while (lutCode.Split(";", &leftStr, &rightStr))
+				{
+					if (leftStr.Contains(returnCode))
+					{
+						int len = lutCode.Len();
+						startIndex = leftStr.Find("Parameters.TexCoords[");
+						if (startIndex != INDEX_NONE)
+						{
+							leftStr = lutCode.Left(startIndex);
+							rightStr = lutCode.Right(len - startIndex);
+							startIndex = rightStr.Find(".xy");
+							if (startIndex != INDEX_NONE)
+							{
+								rightStr = rightStr.Right(rightStr.Len() - startIndex - 3);
+								startIndex = rightStr.Find(";");
+								if (startIndex != INDEX_NONE)
+								{
+									rightStr = rightStr.Left(startIndex) + ";\r\n";
+								}
+								lutCode = leftStr + "uv" + rightStr;
+								lutTexCode = lutCode + "	return " + TranslatedCodeChunks[MP_FKLutMap];
+							}
+
+							break;
+						}
+					}
+
+					lutCode = rightStr;
+				}
+			}
+		}
+		LazyPrintf.PushParam(*lutTexCode);
 		LazyPrintf.PushParam(*GenerateFunctionCode(MP_CustomData0));
 		LazyPrintf.PushParam(*GenerateFunctionCode(MP_CustomData1));
 
diff --git a/Engine/Source/Runtime/Engine/Private/Materials/Material.cpp b/Engine/Source/Runtime/Engine/Private/Materials/Material.cpp
index df82a37dffd..34021272ec6 100644
--- a/Engine/Source/Runtime/Engine/Private/Materials/Material.cpp
+++ b/Engine/Source/Runtime/Engine/Private/Materials/Material.cpp
@@ -3501,7 +3501,7 @@ void UMaterial::Serialize(FArchive& Ar)
 	}
 #endif // #if WITH_EDITOR
 
-	static_assert(MP_MAX == 30, "New material properties must have DoMaterialAttributeReorder called on them to ensure that any future reordering of property pins is correctly applied.");
+	static_assert(MP_MAX == 31, "New material properties must have DoMaterialAttributeReorder called on them to ensure that any future reordering of property pins is correctly applied.");
 
 	if (Ar.UE4Ver() < VER_UE4_MATERIAL_MASKED_BLENDMODE_TIDY)
 	{
@@ -3849,6 +3849,7 @@ void UMaterial::PostLoad()
 	DoMaterialAttributeReorder(&CustomizedUVs[7], UE4Ver);
 	DoMaterialAttributeReorder(&PixelDepthOffset, UE4Ver);
 	DoMaterialAttributeReorder(&ShadingModelFromMaterialExpression, UE4Ver);
+	DoMaterialAttributeReorder(&FKLutMap, UE4Ver);
 #endif // WITH_EDITORONLY_DATA
 
 	if (!IsDefaultMaterial())
@@ -5174,6 +5175,7 @@ FExpressionInput* UMaterial::GetExpressionInputForProperty(EMaterialProperty InP
 		case MP_MaterialAttributes:		return &MaterialAttributes;
 		case MP_PixelDepthOffset:		return &PixelDepthOffset;
 		case MP_ShadingModel:			return &ShadingModelFromMaterialExpression;
+		case MP_FKLutMap:               return &FKLutMap;
 	}
 
 	if (InProperty >= MP_CustomizedUVs0 && InProperty <= MP_CustomizedUVs7)
@@ -5242,6 +5244,7 @@ bool UMaterial::GetAllReferencedExpressions(TArray<UMaterialExpression*>& OutExp
 				MP_WorldPositionOffset,
 				MP_WorldDisplacement,
 				MP_TessellationMultiplier,
+				MP_FKLutMap,
 			};
 
 
@@ -5726,6 +5729,7 @@ int32 UMaterial::CompilePropertyEx( FMaterialCompiler* Compiler, const FGuid& At
 		case MP_WorldDisplacement:		return WorldDisplacement.CompileWithDefault(Compiler, Property);
 		case MP_PixelDepthOffset:		return PixelDepthOffset.CompileWithDefault(Compiler, Property);
 		case MP_ShadingModel:			return ShadingModelFromMaterialExpression.CompileWithDefault(Compiler, Property);
+		case MP_FKLutMap:               return FKLutMap.CompileWithDefault(Compiler, Property);
 
 		default:
 			if (Property >= MP_CustomizedUVs0 && Property <= MP_CustomizedUVs7)
@@ -6205,6 +6209,9 @@ static bool IsPropertyActive_Internal(EMaterialProperty InProperty,
 	case MP_ShadingModel:
 		Active = bUsesShadingModelFromMaterialExpression;
                 break;
+	case MP_FKLutMap:
+		Active = ShadingModels.HasAnyShadingModel({ MSM_ColorRamp });
+		break;
 	case MP_MaterialAttributes:
 	default:
 		Active = true;
diff --git a/Engine/Source/Runtime/Engine/Private/Materials/MaterialExpressions.cpp b/Engine/Source/Runtime/Engine/Private/Materials/MaterialExpressions.cpp
index b87c51868a1..c2fb51749ef 100644
--- a/Engine/Source/Runtime/Engine/Private/Materials/MaterialExpressions.cpp
+++ b/Engine/Source/Runtime/Engine/Private/Materials/MaterialExpressions.cpp
@@ -5365,7 +5365,7 @@ int32 UMaterialExpressionMakeMaterialAttributes::Compile(class FMaterialCompiler
 	int32 Ret = INDEX_NONE;
 	UMaterialExpression* Expression = nullptr;
 
- 	static_assert(MP_MAX == 30, 
+ 	static_assert(MP_MAX == 31, 
 		"New material properties should be added to the end of the inputs for this expression. \
 		The order of properties here should match the material results pins, the make material attriubtes node inputs and the mapping of IO indices to properties in GetMaterialPropertyFromInputOutputIndex().\
 		Insertions into the middle of the properties or a change in the order of properties will also require that existing data is fixed up in DoMaterialAttriubtesReorder().\
@@ -5393,6 +5393,7 @@ int32 UMaterialExpressionMakeMaterialAttributes::Compile(class FMaterialCompiler
 	case MP_Refraction: Ret = Refraction.Compile(Compiler); Expression = Refraction.Expression; break;
 	case MP_PixelDepthOffset: Ret = PixelDepthOffset.Compile(Compiler); Expression = PixelDepthOffset.Expression; break;
 	case MP_ShadingModel: Ret = ShadingModel.Compile(Compiler); Expression = ShadingModel.Expression; break;
+	case MP_FKLutMap: Ret = FKLutMap.Compile(Compiler); Expression = FKLutMap.Expression; break;
 	};
 
 	if (Property >= MP_CustomizedUVs0 && Property <= MP_CustomizedUVs7)
@@ -5450,7 +5451,7 @@ UMaterialExpressionBreakMaterialAttributes::UMaterialExpressionBreakMaterialAttr
 
 	MenuCategories.Add(ConstructorStatics.NAME_MaterialAttributes);
 	
- 	static_assert(MP_MAX == 30, 
+ 	static_assert(MP_MAX == 31, 
 		"New material properties should be added to the end of the outputs for this expression. \
 		The order of properties here should match the material results pins, the make material attriubtes node inputs and the mapping of IO indices to properties in GetMaterialPropertyFromInputOutputIndex().\
 		Insertions into the middle of the properties or a change in the order of properties will also require that existing data is fixed up in DoMaterialAttriubtesReorder().\
@@ -5473,6 +5474,7 @@ UMaterialExpressionBreakMaterialAttributes::UMaterialExpressionBreakMaterialAttr
 	Outputs.Add(FExpressionOutput(TEXT("ClearCoatRoughness"), 1, 1, 0, 0, 0));
 	Outputs.Add(FExpressionOutput(TEXT("AmbientOcclusion"), 1, 1, 0, 0, 0));
 	Outputs.Add(FExpressionOutput(TEXT("Refraction"), 1, 1, 1, 0, 0));
+	Outputs.Add(FExpressionOutput(TEXT("FKLutMap"), 1, 1, 1, 1, 0));
 
 	for (int32 UVIndex = 0; UVIndex <= MP_CustomizedUVs7 - MP_CustomizedUVs0; UVIndex++)
 	{
@@ -5520,7 +5522,8 @@ void UMaterialExpressionBreakMaterialAttributes::Serialize(FStructuredArchive::F
 		}
 
 		Outputs[OutputIndex].SetMask(1, 1, 0, 0, 0); ++OutputIndex;// PixelDepthOffset
-		Outputs[OutputIndex].SetMask(0, 0, 0, 0, 0); // ShadingModelFromMaterialExpression
+		Outputs[OutputIndex].SetMask(0, 0, 0, 0, 0); ++OutputIndex;// ShadingModelFromMaterialExpression
+		Outputs[OutputIndex].SetMask(1, 1, 1, 1, 0);                //FKLutMap
 	}
 #endif // WITH_EDITOR
 }
@@ -5558,6 +5561,7 @@ static void BuildPropertyToIOIndexMap()
 		PropertyToIOIndexMap.Add(MP_CustomizedUVs7, 23);
 		PropertyToIOIndexMap.Add(MP_PixelDepthOffset, 24);
 		PropertyToIOIndexMap.Add(MP_ShadingModel, 25);
+		PropertyToIOIndexMap.Add(MP_FKLutMap, 26);
 	}
 }
 
diff --git a/Engine/Source/Runtime/Engine/Private/Materials/MaterialShader.cpp b/Engine/Source/Runtime/Engine/Private/Materials/MaterialShader.cpp
index 6016a92b6aa..f20c644c57e 100644
--- a/Engine/Source/Runtime/Engine/Private/Materials/MaterialShader.cpp
+++ b/Engine/Source/Runtime/Engine/Private/Materials/MaterialShader.cpp
@@ -70,6 +70,7 @@ FString GetShadingModelString(EMaterialShadingModel ShadingModel)
 		case MSM_Cloth:				ShadingModelName = TEXT("MSM_Cloth"); break;
 		case MSM_Eye:				ShadingModelName = TEXT("MSM_Eye"); break;
 		case MSM_SingleLayerWater:	ShadingModelName = TEXT("MSM_SingleLayerWater"); break;
+		case MSM_ColorRamp:         ShadingModelName = TEXT("MSM_ColorRamp"); break;
 		default: ShadingModelName = TEXT("Unknown"); break;
 	}
 	return ShadingModelName;
diff --git a/Engine/Source/Runtime/Engine/Private/Materials/MaterialShared.cpp b/Engine/Source/Runtime/Engine/Private/Materials/MaterialShared.cpp
index 295a8aa836e..fbdd2fcbcd4 100644
--- a/Engine/Source/Runtime/Engine/Private/Materials/MaterialShared.cpp
+++ b/Engine/Source/Runtime/Engine/Private/Materials/MaterialShared.cpp
@@ -3635,6 +3635,7 @@ void FMaterialAttributeDefinitionMap::InitializeAttributeMap()
 	Add(FGuid(0xD0B0FA03, 0x14D74455, 0xA851BAC5, 0x81A0788B), TEXT("Refraction"),				MP_Refraction,				MCT_Float2,	FVector4(1,0,0,0),	SF_Pixel);
 	Add(FGuid(0x0AC97EC3, 0xE3D047BA, 0xB610167D, 0xC4D919FF), TEXT("PixelDepthOffset"),		MP_PixelDepthOffset,		MCT_Float,	FVector4(0,0,0,0),	SF_Pixel);
 	Add(FGuid(0xD9423FFF, 0xD77E4D82, 0x8FF9CF5E, 0x055D1255), TEXT("ShadingModel"),			MP_ShadingModel,			MCT_ShadingModel,	FVector4(0,0,0,0),	SF_Pixel, INDEX_NONE, false, &CompileShadingModelBlendFunction);
+	Add(FGuid(0xBB14233C, 0xFCD83D1A, 0xA12FD543, 0x93DA44FF), TEXT("FKLutMap"),				MP_FKLutMap,				MCT_Float3, FVector4(0, 0, 0, 0), SF_Pixel);
 
 	// Texture coordinates
 	Add(FGuid(0xD30EC284, 0xE13A4160, 0x87BB5230, 0x2ED115DC), TEXT("CustomizedUV0"), MP_CustomizedUVs0, MCT_Float2, FVector4(0,0,0,0), SF_Vertex, 0);
diff --git a/Engine/Source/Runtime/Engine/Public/SceneTypes.h b/Engine/Source/Runtime/Engine/Public/SceneTypes.h
index 05c58143061..b0307cf0017 100644
--- a/Engine/Source/Runtime/Engine/Public/SceneTypes.h
+++ b/Engine/Source/Runtime/Engine/Public/SceneTypes.h
@@ -180,6 +180,8 @@ enum EMaterialProperty
 	//^^^ New material properties go above here ^^^^
 	MP_MaterialAttributes UMETA(Hidden),
 	MP_CustomOutput UMETA(Hidden),
+	MP_FKLutMap UMETA(Hidden),
+
 	MP_MAX UMETA(DisplayName = "None"),
 };
 
-- 
2.22.0.windows.1

